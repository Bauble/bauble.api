#!/usr/bin/env python

import os
import sys
import subprocess

import bauble

try:
    import baker
except Exception as e:
    # TODO install baker and rerun
    print("baker not installed. pip install 'baker>=1.3,<2.0a0'")
    raise


os.environ['PYTHONPATH'] = os.getcwd()
#BAUBLE_DB_URL="postgresql://test:test@localhost/bauble" BAUBLE_ENV="development"

# these environments can be updated into os.environ
environ = {}
environ['all'] = {

}
environ['dev'] = dict(environ['all'], **{
    'BAUBLE_ENV': "development"
})

environ['test'] = dict(environ['dev'], **{
    'TEST': 'true',
    'BAUBLE_TEST': 'true'
})

environ['production'] = dict(environ['all'], **{
    'BAUBLE_ENV': "development"
})

# all the environment variables common to all tasks
os.environ.update(environ['all'])

def shell(cmd, stdin=sys.stdin, stdout=sys.stdout, stderr=sys.stderr):
    return subprocess.call(cmd, stdin=stdin, stdout=stdout, stderr=stderr, shell=True)


@baker.command
def test(*args):
    """
    Deploy to the production environment.
    """
    os.environ.update(environ['test'])
    pytest_args = ['py.test', 'test/spec'] if len(args) is 0 else ['py.test'] + list(args)
    shell(" ".join(pytest_args))


@baker.command
def virtualenv():
    # TODO: create the virtualenv and install the dependencies
    pass


@baker.command
def deploy():
    """
    Deploy to the production environment.
    """
    # TODO: copy to server and restart server
    pass


@baker.command
def clean():
    rm = lambda pattern: shell("find . -name {0} -type file | xargs -I {{}} rm -fr {{}}".format(pattern))
    rm("\*~")
    rm("\*.pyc")
    rm("__pycache__")


@baker.command(default=True)
def server(environment="dev"):
    """
    Start the server
    """
    os.environ.update(environ.get(environment, {}))
    process = shell("uwsgi --ini uwsgi.ini:{}".format(environment))


baker.run()
